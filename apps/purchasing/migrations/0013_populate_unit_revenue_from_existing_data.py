# Generated by Django 5.2 on 2025-07-01 08:44

import logging
from decimal import Decimal

from django.db import migrations

logger = logging.getLogger(__name__)


def populate_unit_revenue(apps, schema_editor):
    """Populate unit_revenue from existing unit_cost and retail_rate values"""
    Stock = apps.get_model("purchasing", "Stock")

    updated_count = 0
    for stock in Stock.objects.all():
        if stock.unit_cost and stock.unit_cost > 0 and stock.unit_revenue is None:
            # unit_revenue = unit_cost * (1 + retail_rate)
            stock.unit_revenue = stock.unit_cost * (Decimal("1") + stock.retail_rate)
            stock.save()
            updated_count += 1

    logger.info(f"Populated unit_revenue for {updated_count} stock items")


def reverse_populate_unit_revenue(apps, schema_editor):
    """Reverse migration - clear unit_revenue values"""
    Stock = apps.get_model("purchasing", "Stock")
    Stock.objects.update(unit_revenue=None)
    logger.info("Cleared all unit_revenue values")


class Migration(migrations.Migration):
    dependencies = [
        ("purchasing", "0012_add_unit_revenue_to_stock"),
    ]

    operations = [
        migrations.RunPython(populate_unit_revenue, reverse_populate_unit_revenue),
    ]
