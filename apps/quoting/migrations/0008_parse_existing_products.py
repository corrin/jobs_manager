# Generated by Django 5.2 on 2025-06-16 10:00

from django.db import migrations


def parse_existing_products(apps, schema_editor):
    """Parse existing supplier products and stock items to create mappings."""
    # Import models
    SupplierProduct = apps.get_model('quoting', 'SupplierProduct')
    Stock = apps.get_model('purchasing', 'Stock')

    # Import the parser - we need to import it inside the function
    # since it's not available at migration time
    try:
        from apps.quoting.services.product_parser import ProductParser
        parser = ProductParser()

        print("Parsing existing supplier products in batches...")
        supplier_products = list(SupplierProduct.objects.all())

        # Process in batches of 100
        for i in range(0, len(supplier_products), parser.BATCH_SIZE):
            batch = supplier_products[i:i + parser.BATCH_SIZE]
            product_data_list = []

            for product in batch:
                product_data_list.append({
                    'description': product.description,
                    'product_name': product.product_name,
                    'specifications': product.specifications,
                    'item_no': product.item_no,
                    'variant_id': product.variant_id,
                    'variant_width': product.variant_width,
                    'variant_length': product.variant_length,
                    'variant_price': product.variant_price,
                    'price_unit': product.price_unit,
                })

            try:
                results = parser.parse_products_batch(product_data_list)
                print(
                    f"Processed batch {i//parser.BATCH_SIZE + 1}: {len(results)} products")
            except Exception as e:
                print(
                    f"Error parsing supplier product batch {i//parser.BATCH_SIZE + 1}: {e}")

        print("Parsing existing stock items in batches...")
        stock_items = list(Stock.objects.all())

        # Process in batches of 100
        for i in range(0, len(stock_items), parser.BATCH_SIZE):
            batch = stock_items[i:i + parser.BATCH_SIZE]
            stock_data_list = []

            for stock in batch:
                stock_data_list.append({
                    'description': stock.description,
                    'product_name': stock.item_code,
                    'specifications': stock.specifics,
                    'item_no': stock.item_code,
                    'variant_id': f'{stock.metal_type}_{stock.alloy}' if stock.metal_type and stock.alloy else stock.item_code,
                })

            try:
                results = parser.parse_products_batch(stock_data_list)
                print(
                    f"Processed stock batch {i//parser.BATCH_SIZE + 1}: {len(results)} items")
            except Exception as e:
                print(
                    f"Error parsing stock batch {i//parser.BATCH_SIZE + 1}: {e}")

        print("Parsing complete!")

    except ImportError as e:
        print(f"Could not import parser during migration: {e}")
        print("Mappings will be created when products are next accessed")


def reverse_parse_existing_products(apps, schema_editor):
    """Remove all product parsing mappings."""
    ProductParsingMapping = apps.get_model('quoting', 'ProductParsingMapping')
    ProductParsingMapping.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("quoting", "0007_supplierproduct_parsed_alloy_and_more"),
        ("purchasing", "0008_stock_parsed_at_stock_parser_confidence_and_more"),
    ]

    operations = [
        migrations.RunPython(
            parse_existing_products,
            reverse_parse_existing_products,
        ),
    ]
